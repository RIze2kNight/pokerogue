~targu1n-CheatMenu
#src/modifier/modifier-type.ts
-class AddPokeballModifierType extends ModifierType {
export class AddPokeballModifierType extends ModifierType {

#src/modifier/modifier-type.ts
-class AddVoucherModifierType extends ModifierType {
export class AddVoucherModifierType extends ModifierType {

#src/modifier/modifier-type.ts
-class AllPokemonFullReviveModifierType extends AllPokemonFullHpRestoreModifierType {
export class AllPokemonFullReviveModifierType extends AllPokemonFullHpRestoreModifierType {

#src/modifier/modifier-type.ts
-class SpeciesStatBoosterModifierTypeGenerator extends ModifierTypeGenerator {
export class SpeciesStatBoosterModifierTypeGenerator extends ModifierTypeGenerator {


#src/ui/abstact-option-select-ui-handler.ts
+    super.show(args);
    this.scrollCursor = 0;


#src/ui/modifier-select-ui-handler.ts
+  private checkButtonContainer: Phaser.GameObjects.Container;
  private cheatMenuButtonContainer: Phaser.GameObjects.Container;

#src/ui/modifier-select-ui-handler.ts
+    this.checkButtonContainer.add(checkButtonText);

    this.cheatMenuButtonContainer = globalScene.add.container((globalScene.game.canvas.width / 6) - 141, OPTION_BUTTON_YPOSITION);
    this.cheatMenuButtonContainer.setName("cheat-btn");
    this.cheatMenuButtonContainer.setVisible(false);
    ui.add(this.cheatMenuButtonContainer);

    const cheatMenuButtonText = addTextObject(-4, -2, "Cheats", TextStyle.PARTY);
    cheatMenuButtonText.setName("text-cheat-btn");
    cheatMenuButtonText.setOrigin(1, 0);
    this.cheatMenuButtonContainer.add(cheatMenuButtonText);

#src/ui/modifier-select-ui-handler.ts
+    this.checkButtonContainer.setVisible(false);
    this.checkButtonContainer.setAlpha(0);

    this.cheatMenuButtonContainer.setVisible(false);
    this.cheatMenuButtonContainer.setAlpha(0);

#src/ui/modifier-select-ui-handler.ts
+      this.checkButtonContainer.setAlpha(0);
      this.cheatMenuButtonContainer.setAlpha(0);

#src/ui/modifier-select-ui-handler.ts
+      this.checkButtonContainer.setVisible(true);
      this.cheatMenuButtonContainer.setVisible(true);

#src/ui/modifier-select-ui-handler.ts
-        targets: [ this.rerollButtonContainer, this.lockRarityButtonContainer ],
        targets: [ this.rerollButtonContainer, this.lockRarityButtonContainer, this.cheatMenuButtonContainer ],

#src/ui/modifier-select-ui-handler.ts
-          if (this.rowCursor === 0 && this.cursor === 3) {
          if (this.rowCursor === 0 && this.cursor === 4) {

#src/ui/modifier-select-ui-handler.ts
+        newCursor = 3;
+      }
+      // Allows to loop to top when lock rarity button is shown
+      if (rowCursor === this.shopOptionsRows.length + 1 && lastRowCursor === 0 && this.cursor === 3) {
+        newCursor = 0;
+      }
      if (newCursor > this.options.length + 1 && rowCursor === 1) {
        newCursor = 5;
      }

#src/ui/modifier-select-ui-handler.ts
+            success = this.setRowCursor(this.rowCursor - 1);
            if (!this.rowCursor) {
                this.setCursor(this.cursor === 2 ? 3 : this.cursor);
            }

#src/ui/modifier-select-ui-handler.ts
+          } else if (this.lockRarityButtonContainer.visible && this.cursor === 0) {
-            success = this.setCursor(3);
-          } else {
            success = this.setCursor(4);
          } else {
            if (this.lockRarityButtonContainer.visible && this.cursor === 4) {
                this.setCursor(0)
            }

#src/ui/modifier-select-ui-handler.ts
-                success = this.setCursor(2);
-                break;
-              case 1:
-                if (this.lockRarityButtonContainer.visible) {
-                  success = this.setCursor(3);
-                } else {
-                  success = this.rerollButtonContainer.visible && this.setCursor(0);
-                }
-                break;
-              case 2:
-                if (this.transferButtonContainer.visible) {
-                  success = this.setCursor(1);
-                } else if (this.rerollButtonContainer.visible) {
-                  success = this.setCursor(0);
-                } else {
-                  success = false;
-                }
-                break;
-              case 3:
-                if (this.lockRarityButtonContainer.visible) {
-                  success = this.setCursor(2);
                success = this.setCursor(3);
                break;
              case 1:
                success = this.setCursor(0);
                break;
              case 2:
                success = this.rerollButtonContainer.visible && this.setCursor(1);
                break;
              case 3:
                if (this.transferButtonContainer.visible) {
                  success = this.setCursor(2);
                } else if (this.rerollButtonContainer.visible) {
                  success = this.setCursor(1);
                } else {
                  success = false;
                }
                break;
              case 4:
                if (this.lockRarityButtonContainer.visible) {
                  success = this.setCursor(3);

#src/ui/modifier-select-ui-handler.ts
-              case 0:
-                if (this.transferButtonContainer.visible) {
-                  success = this.setCursor(1);
-                } else {
-                  success = this.setCursor(2);
-                }
-                break;
-              case 1:
-                success = this.setCursor(2);
-                break;
-              case 2:
-                success = this.setCursor(0);
-                break;
-              case 3:
-                if (this.transferButtonContainer.visible) {
-                  success = this.setCursor(1);
-                } else {
-                  success = this.setCursor(2);
-                }
-                break;
              case 0:
                success = this.setCursor(1);
                break;
              case 1:
                if (this.transferButtonContainer.visible) {
                  success = this.setCursor(2);
                } else {
                  success = this.setCursor(3);
                }
                break;
              case 2:
                success = this.setCursor(3);
                break;
              case 3:
                if (this.transferButtonContainer.visible) {
                  success = this.setCursor(4);
                } else {
                  success = this.setCursor(2);
                }
                break;
              case 4:
                success = this.setCursor(1);
                break;

#src/ui/modifier-select-ui-handler.ts
+    } else if (cursor === 1) {
      this.cursorObj.setPosition((globalScene.game.canvas.width / 6) - 180, -60);
      ui.showText("Open a cheat Menu to give yourself items.");
    } else if (cursor === 2) {

#src/ui/modifier-select-ui-handler.ts
-    } else if (cursor === 2) {
    } else if (cursor === 3) {

#src/ui/modifier-select-ui-handler.ts
-    [ this.rerollButtonContainer, this.checkButtonContainer, this.transferButtonContainer, this.lockRarityButtonContainer, this.continueButtonContainer ].forEach(container => {
    [ this.rerollButtonContainer, this.checkButtonContainer, this.transferButtonContainer, this.cheatMenuButtonContainer, this.lockRarityButtonContainer, this.continueButtonContainer ].forEach(container => {


#src/phases/select-modifier-phase.ts
+                globalScene.playSound("se/buy");
+              }
+              break;
+            case 1:
              globalScene.mods.showCheatMenu(this.isPlayer(), this.typeOptions, modifierSelectCallback, this.getRerollCost(this.typeOptions, globalScene.lockModifierTiers), party);
              break;
            case 2:

#src/phases/select-modifier-phase.ts
+              break;
-            case 2:
            case 3:

#src/phases/select-modifier-phase.ts
+              break;
-            case 3:
            case 4:










